# Antes de ejecutar un script de Python en Streamlit debes definir la carpeta donde se encuentra tus archivos
# Abrimos el folder desde visual Studio Code 
# Primero creamos un entorno virtual para instalar Streamlit y otras librer√≠as que necesitemos.
# python -m venv .venv
# Esto nos permite crear un entorno virtual donde instalaremos Streamlit y observaremos la p√°gina web que se est√° generando en este script.

# Luego activamos el entorno virtual.
# En Windows:
# .venv\Scripts\activate

# Acontinuaci√≥n instalamos Streamlit 
# pip install Streamlit

# Este c√≥digo sirve para acceder una p√°gina web en tu navegador que te brinda informaci√≥n sobre Streamlit.
# Pero se ejecuta en la terminal Python de tu computadora, no en Jupyter Notebook.
# streamlit hello

# Este comando sirve para ejecutar un script de Python en Streamlit.
# Pero se ejecuta en la terminal de tu computadora, no en Jupyter Notebook.
# OJO: Debes antes tener instalado Streamlit en tu computadora, debes antes definir la ruta de tus archivos y 
##     tener un script de Python (your_script.py) que quieras ejecutar en Streamlit.
# streamlit run your_script.py
# python -m streamlit run your_script.py

# Este c√≥digo sirve para hacer un primer programa en Streamlit.
import streamlit as st
import pandas as pd #Importamos esta biblioteca para poder manipular y analizar datos
import ipywidgets as widgets # Importamos el paquete de Widgets para que sea m√°s interactivo con botones
from IPython.display import display, clear_output # Importamos para mostrar resultados o elementos (como gr√°ficos o botones) y borrar resultados anteriores en notebooks interactivos
import matplotlib.pyplot as plt # Importamos para que se pueda generar el grafico circular
from IPython.display import display_html
from IPython.display import Image, display

df = pd.read_excel("base_de_datos.xlsx")
# Generamos 3 p√°ginas en la aplicaci√≥n web de Streamlit.
# Generamos una p√°gina principal, otra donde contaran su experiencia aprendiendo a programar y una tercera donde presentar√°n sus gr√°ficos.

# Creamos la lista de p√°ginas
paginas = ['Bienvenida', 'Conociendo a las artistas', 'Descubre tu canci√≥n ideal']

# Creamos botones de navegaci√≥n tomando la lista de p√°ginas
pagina_seleccionada = st.sidebar.selectbox('Selecciona una p√°gina', paginas)

# Generamos condicionales para mostrar el contenido de cada p√°gina
if pagina_seleccionada == 'Bienvenida':

    # La funci√≥n st.markdown permite centrar y agrandar la letra del t√≠tulo de la web en Streamlit.
    st.markdown("<h1 style='text-align: center;'>Descubre tu match musical entre Mar√≠a Becerra y Taylor Swift</h1>", unsafe_allow_html=True)
    
    st.markdown("<p style='text-align: center; font-size: 20px;'>HOLAAAAAA, te damos la bienvenida a esta p√°gina hecha con mucho cari√±o, dedicaci√≥n, risas, l√°grimas, bajones y esfuerzos. Aqu√≠ podr√°s descubrir tu match musical ya sea con Maria becerra (reina argentina hermosa) o con Taylor Swift (reina estadounidense ic√≥nica).</p>", unsafe_allow_html=True)

    # Agregamos un subt√≠tulo
    st.markdown("<h2 style='text-align: center;'>Las creadoras de la magia</h2>", unsafe_allow_html=True)

    st.markdown("<p style='text-align: center; font-size: 20px;'>Primero, vamos a dar una breve introducci√≥n sobre qui√©nes son las autoras intelectuales y pythonianas de este espacio digital:</p>", unsafe_allow_html=True)
    # <h1 style='text-align: center;'>Nombre de tu blog</h1>: Esto es una cadena de c√≥digo HTML. 
    # La etiqueta <h1> se utiliza para el encabezado principal de una p√°gina web, y 
    # el atributo style se utiliza para agregar estilos CSS. 
    # En este caso, el texto est√° alineado al centro (text-align: center;). 
    # Pueden agregar emojis en el texto de Markdown utilizando c√≥digos de emoji, por ejemplo:
    # <h1 style='text-align: center;'>Aqu√≠ escribe un nombre creativo para tu blog üìù</h1>
    # Tambi√©n pueden personalizar el color del texto utilizando el atributo style, por ejemplo:
    # <h1 style='text-align: center; color: blue;'>Nombre de tu blog</h1>
    # El texto dentro de las etiquetas <h1> ("Aqu√≠ escribe un nombre creativo para tu blog") es el contenido del encabezado.

    # unsafe_allow_html=True: Este es un argumento opcional en la funci√≥n markdown. 
    # Por defecto, streamlit no permite HTML en el texto de Markdown.
    # Sin embargo, establecer unsafe_allow_html en True permite el uso de HTML.

    # Creamos dos columnas separadas para la imagen y el texto
    col1, col2 = st.columns(2)

    # col1, col2 = st.columns(2): Esta l√≠nea est√° creando dos columnas en la interfaz de usuario de la aplicaci√≥n web. 
    # La funci√≥n st.columns toma un n√∫mero entero como argumento que especifica el n√∫mero de columnas que se deben crear. 
    # Las columnas creadas se asignan a las variables col1 y col2.

    # En la primera columna colocamos la imagen de perfil
    col1.image("foto1.jpg", caption='CEO Vivian', width=300)

    # col1.image("ellie.png", caption='Ellie', width=300): Esta l√≠nea est√° colocando una imagen en la primera columna (col1). 
    # La funci√≥n image toma como primer argumento el nombre del archivo de la imagen que se desea mostrar. 
    # En este caso, la imagen es "ellie.png". 
    # El argumento caption se utiliza para proporcionar una etiqueta a la imagen, 
    # en este caso "Aqu√≠ puedes escribir una etiqueta debajo de la imagen". 
    # El argumento width se utiliza para especificar el ancho de la imagen, en este caso 300 p√≠xeles.

    # En la segunda columna colocamos el texto: Debe contener una presentaci√≥n de ustedes
    # Deben presentarse: ¬øQui√©n eres?, ¬øDe d√≥nde eres?, ¬øQu√© estudias?, ¬øQu√© te gusta de tu carrera?, 
    # ¬øQu√© te gustar√≠a hacer en el futuro?, ¬øQu√© te gusta hacer en tu tiempo libre?

    texto = """Holaaaaaa, soy Vivian :) Al momento en el que escribo esto tengo 19 a√±os, nac√≠ el 12 de abril, igual que Vegetta777. Tengo una perrita llamada Kiki, ella es ic√≥nica y tiene una personalidad bien definida. Disfruto estar con las personas que me hacen sentir segura y feliz: mi mam√°, mi familia y mis amistades. Me encanta reflexionar sobre aspectos de la vida y ver videos hopecore. Mi artista favorita que admiro mucho es Mar√≠a Becerra. Soy una jubilada de Club Penguin (buenos tiempos). Me gusta bailar, cantar, escuchar m√∫sica, hacer manualidades, dormir, comer, entre otras cositas lokotronas que me dan vida."""

    # Las comillas triples (""") en Python se utilizan para definir cadenas multil√≠nea.
    
    # Mostramos el texto
    col2.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>", unsafe_allow_html=True)

    # <div style='text-align: justify; font-size: 15px;'>{texto}</div>: Esta es una cadena de c√≥digo HTML. 
    # La etiqueta <div> se utiliza para agrupar contenido en HTML. 
    # En este caso, el texto est√° justificado (text-align: justify;). 
    # El tama√±o de la fuente se establece en 15 p√≠xeles (font-size: 15px;).
    # El texto dentro de las etiquetas <div> es la variable texto.
    # f"": Esto es un f-string en Python.
    # Permite insertar el valor de una variable directamente en la cadena. 
    # En este caso, {texto} se reemplaza por el valor de la variable texto.

    # Creamos dos columnas separadas para la imagen y el texto
    col3, col4 = st.columns(2)

    # col1, col2 = st.columns(2): Esta l√≠nea est√° creando dos columnas en la interfaz de usuario de la aplicaci√≥n web. 
    # La funci√≥n st.columns toma un n√∫mero entero como argumento que especifica el n√∫mero de columnas que se deben crear. 
    # Las columnas creadas se asignan a las variables col1 y col2.

    # En la primera columna colocamos la imagen de perfil
    col4.image("foto2.jpg", caption='CEO Adriana', width=300)

    # col1.image("ellie.png", caption='Ellie', width=300): Esta l√≠nea est√° colocando una imagen en la primera columna (col1). 
    # La funci√≥n image toma como primer argumento el nombre del archivo de la imagen que se desea mostrar. 
    # En este caso, la imagen es "ellie.png". 
    # El argumento caption se utiliza para proporcionar una etiqueta a la imagen, 
    # en este caso "Aqu√≠ puedes escribir una etiqueta debajo de la imagen". 
    # El argumento width se utiliza para especificar el ancho de la imagen, en este caso 300 p√≠xeles.

    # En la segunda columna colocamos el texto: Debe contener una presentaci√≥n de ustedes
    # Deben presentarse: ¬øQui√©n eres?, ¬øDe d√≥nde eres?, ¬øQu√© estudias?, ¬øQu√© te gusta de tu carrera?, 
    # ¬øQu√© te gustar√≠a hacer en el futuro?, ¬øQu√© te gusta hacer en tu tiempo libre?

    texto_2 = """¬°Holii! Soy Adriana, pero pueden decirme Adri o Adrianita. Actualmente estoy en 5to ciclo de la carrera de Publicidad. Me considero un gato negro, pero por dentro soy un schnauzer; o sea, parezco muy seria y fr√≠a, pero por dentro soy sensible, un poco miedosa de todo y me estreso r√°pido (tiemblo como chihuahua cuando me estreso). Me gustan los retos y soy una payasa en el buen sentido. Llevo siendo fan de Taylor Swift desde hace 5 a√±os; las personas que me conocen saben que me gusta decir: ‚ÄúDe hecho, Taylor tiene una canci√≥n sobre esto.‚Äù ¬°Entonces, aqu√≠ estamos!"""

    # Las comillas triples (""") en Python se utilizan para definir cadenas multil√≠nea.
    
    # Mostramos el texto
    col3.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto_2}</div>", unsafe_allow_html=True)

    # <div style='text-align: justify; font-size: 15px;'>{texto}</div>: Esta es una cadena de c√≥digo HTML. 
    # La etiqueta <div> se utiliza para agrupar contenido en HTML. 
    # En este caso, el texto est√° justificado (text-align: justify;). 
    # El tama√±o de la fuente se establece en 15 p√≠xeles (font-size: 15px;).
    # El texto dentro de las etiquetas <div> es la variable texto.
    # f"": Esto es un f-string en Python.
    # Permite insertar el valor de una variable directamente en la cadena. 
    # En este caso, {texto} se reemplaza por el valor de la variable texto.

elif  pagina_seleccionada == 'Conociendo a las artistas':

    # Agregamos un t√≠tulo
    st.markdown("<h1 style='text-align: center;'>Conociendo a las artistas</h1>", unsafe_allow_html=True)

    st.markdown("<p style='text-align: center; font-size: 20px;'>Si llegaste a este cuestionario, es muy probable que ya conozcas a Mar√≠a Becerra y Taylor Swift. Pero, por si no es as√≠, a continuaci√≥n te ofrecemos una breve presentaci√≥n de qui√©n es cada una:</p>", unsafe_allow_html=True)

    # Creamos dos columnas separadas para la imagen y el texto
    col1, col2 = st.columns(2)

    # col1, col2 = st.columns(2): Esta l√≠nea est√° creando dos columnas en la interfaz de usuario de la aplicaci√≥n web. 
    # La funci√≥n st.columns toma un n√∫mero entero como argumento que especifica el n√∫mero de columnas que se deben crear. 
    # Las columnas creadas se asignan a las variables col1 y col2.

    # En la primera columna colocamos la imagen de perfil
    col1.image("foto3.jpg", caption='La nena de Argentina', width=300)
    # Agregar un  texto para la respuesta
    texto_3 = """Mar√≠a Becerra es una de las mejores cantantes femeninas de Argentina. La mayor√≠a de sus canciones se caracterizan por hablar de amores que duelen, de empoderarse despu√©s de caer, y de disfrutar el deseo sin culpa. Mar√≠a Becerra es el claro ejemplo de que, con perseverancia y confianza, se puede lograr todo lo que una se propone; de Quilmes para el mundo, su historia inspira a so√±ar en grande."""

    # Mostramos el texto
    col2.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto_3}</div>", unsafe_allow_html=True)

    # <div style='text-align: justify; font-size: 15px;'>{texto_2}</div>: Esta es una cadena de c√≥digo HTML.
    # La etiqueta <div> se utiliza para agrupar contenido en HTML.
    # En este caso, el texto est√° justificado (text-align: justify;).
    # El tama√±o de la fuente se establece en 15 p√≠xeles (font-size: 15px;).
    # El texto dentro de las etiquetas <div> es la variable texto_2.
    # f"": Esto es un f-string en Python.
    # Permite insertar el valor de una variable directamente en la cadena. 
    # En este caso, {texto_2} se reemplaza por el valor de la variable texto.

     # Creamos dos columnas separadas para la imagen y el texto
    col3, col4 = st.columns(2)

    # col1, col2 = st.columns(2): Esta l√≠nea est√° creando dos columnas en la interfaz de usuario de la aplicaci√≥n web. 
    # La funci√≥n st.columns toma un n√∫mero entero como argumento que especifica el n√∫mero de columnas que se deben crear. 
    # Las columnas creadas se asignan a las variables col1 y col2.

    # En la primera columna colocamos la imagen de perfil
    col4.image("foto4.jpg", caption='Tay-Tay', width=300)

    # col1.image("ellie.png", caption='Ellie', width=300): Esta l√≠nea est√° colocando una imagen en la primera columna (col1). 
    # La funci√≥n image toma como primer argumento el nombre del archivo de la imagen que se desea mostrar. 
    # En este caso, la imagen es "ellie.png". 
    # El argumento caption se utiliza para proporcionar una etiqueta a la imagen, 
    # en este caso "Aqu√≠ puedes escribir una etiqueta debajo de la imagen". 
    # El argumento width se utiliza para especificar el ancho de la imagen, en este caso 300 p√≠xeles.

    # En la segunda columna colocamos el texto: Debe contener una presentaci√≥n de ustedes
    # Deben presentarse: ¬øQui√©n eres?, ¬øDe d√≥nde eres?, ¬øQu√© estudias?, ¬øQu√© te gusta de tu carrera?, 
    # ¬øQu√© te gustar√≠a hacer en el futuro?, ¬øQu√© te gusta hacer en tu tiempo libre?

    texto_4 = """Taylor Swift es una cantante y compositora estadounidense mundialmente reconocida.  A lo largo de su carrera ha explorado distintos g√©neros, desde el country hasta el pop, el indie y el rock alternativo. M√°s all√° de la m√∫sica, ha marcado tendencia en la industria con la regrabaci√≥n de sus antiguos √°lbumes, defendiendo la propiedad de su arte y dejando un mensaje claro sobre el poder y la autonom√≠a de las artistas mujeres en la industria musical."""

    # Las comillas triples (""") en Python se utilizan para definir cadenas multil√≠nea.
    
    # Mostramos el texto
    col3.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto_4}</div>", unsafe_allow_html=True)

    # <div style='text-align: justify; font-size: 15px;'>{texto}</div>: Esta es una cadena de c√≥digo HTML. 
    # La etiqueta <div> se utiliza para agrupar contenido en HTML. 
    # En este caso, el texto est√° justificado (text-align: justify;). 
    # El tama√±o de la fuente se establece en 15 p√≠xeles (font-size: 15px;).
    # El texto dentro de las etiquetas <div> es la variable texto.
    # f"": Esto es un f-string en Python.
    # Permite insertar el valor de una variable directamente en la cadena. 
    # En este caso, {texto} se reemplaza por el valor de la variable texto.
    
else:

    # Agregamos un t√≠tulo para la p√°gina de gr√°ficos
    st.markdown("<h1 style='text-align: center;'>Descubre tu cancion ideal</h1>", unsafe_allow_html=True)

    def convertir_valor(valor):
        if isinstance(valor, str):
            valor = valor.replace(",", "").strip().upper()
            if valor.endswith("M"):
                return int(float(valor[:-1]) * 1_000_000)
            elif valor.endswith("K"):
                return int(float(valor[:-1]) * 1_000)
            elif valor.replace('.', '', 1).isdigit():
                return int(float(valor))
        try:
            return int(valor)
        except:
            return 0

    # Lista de preguntas con opciones y emociones asociadas (emociones ocultas al usuario)
    preguntas = [
        ("¬øQu√© frase es compatible con la emoci√≥n que domina tu d√≠a hoy?",
        {
            "a": ("Hoy estoy vibrando alto, me siento joya", ["Euforia", "Amor"]),
            "b": ("Mmm la verdad no me siento del todo bien, estoy modo troste", ["Melancol√≠a", "Tristeza"]),
            "c": ("¬°Qu√≠tate t√∫ que lleg√≥ la caballota, la perra, la diva, la potra!", ["Empoderamiento", "Coqueter√≠a"]),
            "d": ("Te amo, te amooooo (jovani reference)", ["Enamoramiento", "Amor"])
        }),
        ("¬øC√≥mo lidias con las emociones dif√≠ciles?",
        {
            "a": ("Me fallaste, me decepcionaste, me perdiste, te odio, bye", ["Enojo", "Resentimiento"]),
            "b": ("D√©nme un tiempo para procesar, necesito mi lob@ solitari@ era", ["Tristeza", "Soledad"]),
            "c": ("Vamos de fiesta, a conocer gente nueva, lokura, outfit hot", ["Coqueter√≠a", "Euforia"]),
            "d": ("Mi mente busca refugio en los recuerdos idealizados del pasado", ["Nostalgia", "Soledad"])
        }),
        ("¬øQu√© necesitas escuchar/hacer a veces para sentirte mejor?",
        {
            "a": ("Palabras de afirmaci√≥n para recordarme mi esencia divina.", ["Empoderamiento", "Pasi√≥n"]),
            "b": ("Mis pensamientos para sobrepensar y sobreanalizar", ["Nostalgia", "Confusi√≥n"]),
            "c": ("Soltar las preocupaciones y miedos, vivir el presente con libertad", ["Libertad", "Calma"]),
            "d": ("Agradecer por lo que fue y que ser√°, cosas buenas llegan a mi vida", ["Euforia", "Gratitud"])
        }),
        ("¬øC√≥mo describir√≠as tu estado amoroso actual?",
        {
            "a": ("Ando fuego uterino descontrolado intenso", ["Coqueter√≠a"]),
            "b": ("Me han dado m√°s vueltas que un trompo", ["Confusi√≥n"]),
            "c": ("¬°Extra√±o a cierta personita!", ["Melancol√≠a"]),
            "d": ("Extremadamente agradecida con el de arriba que esa persona ya no es parte de mi vida", ["Gratitud"])
        }),
        ("¬øQu√© energ√≠a buscas en una canci√≥n ahora mismo?",
        {
            "a": ("Energ√≠a euf√≥rica‚Ä¶quiero mover el esqueleto", ["Euforia"]),
            "b": ("Energ√≠a funadora‚Ä¶ tengo ganas de funar a alguien", ["Enojo", "Resentimiento"]),
            "c": ("Energ√≠a de dios(a), ser superior, astral y poderos@", ["Empoderamiento"]),
            "d": ("Una energ√≠a donde miro a la nada y pienso en todo‚Ä¶ TODO", ["Nostalgia"])
        }),
        ("Elige otra frase que te identifique:",
        {
            "a": ("Soy una persona libre y salvaje, soporten", ["Libertad", "Empoderamiento"]),
            "b": ("Hicieron caldo a mi coraz√≥n de pollo", ["Tristeza", "Arrepentimiento"]),
            "c": ("Soy amor y abundancia, I don't chase I attract", ["Empoderamiento", "Seguridad"]),
            "d": ("Extra√±o algo/alguien del pasado‚Ä¶lol que mal", ["Nostalgia", "Melancol√≠a"])
        }),
    ]

    respuestas = []
    emociones = []

    # Mostrar preguntas y recolectar emociones
    for idx, (pregunta, opciones) in enumerate(preguntas):
        st.subheader(f"{idx + 1}. {pregunta}")
        opciones_ui = {texto: clave for clave, (texto, _) in opciones.items()}
        seleccion_texto = st.radio("Selecciona una opci√≥n:", list(opciones_ui.keys()), key=f"q_{idx}")
        clave_elegida = opciones_ui[seleccion_texto]
        respuestas.append(seleccion_texto)
        emociones.extend(opciones[clave_elegida][1])

    if st.button("üé∂ Ver recomendaci√≥n musical"):
        if not emociones:
            st.warning("Por favor responde al menos una pregunta.")
        else:
            conteo = pd.Series(emociones).value_counts()
            emocion_top = conteo.idxmax()

            # Recomendaci√≥n musical
            recomendacion = df[df['Sentimiento'].str.contains(emocion_top, case=False)]
            if not recomendacion.empty:
                cancion = recomendacion.iloc[0]
                st.success(f"üéµ Canci√≥n recomendada: **{cancion['Canci√≥n']}** - *{cancion['Artista']}*")
                st.video(cancion['URL video'])
                st.image(cancion['URL portada'], caption="Portada", width=300)

                spotify_reps = convertir_valor(cancion['Numero de reproducciones en spotify'])
                youtube_reps = convertir_valor(cancion['Cantidad de visualizaciones en youtube'])

                st.markdown(f"**üéß Reproducciones en Spotify:** {spotify_reps:,}")
                st.markdown(f"**üìπ Reproducciones en YouTube:** {youtube_reps:,}")

                st.markdown("**üé§ Letra (fragmento):**")
                st.text(cancion['Letra'][:700] + "...")

                # Gr√°fico de pastel
                conteo_artistas = df[df['Sentimiento'].isin(conteo.index)]['Artista'].value_counts()
                fig, ax = plt.subplots()
                colores = ['#4a07a2', '#ff9a9a']
                conteo_artistas.plot.pie(autopct='%1.1f%%', colors=colores, ax=ax)
                ax.set_ylabel("")
                ax.set_title("¬øCon qu√© artista haces m√°s match emocional?")
                st.pyplot(fig)
            else:
                st.error("No encontramos una canci√≥n exacta, pero igual escucha sus canciones que son las mejores!! üòâ")
    